{"ast":null,"code":"// node --version # Should be >= 18\n// npm install @google/generative-ai\n\nimport { GoogleGenerativeAI, HarmCategory, HarmBlockThreshold } from \"@google/generative-ai\";\nconst MODEL_NAME = \"gemini-1.0-pro\";\nconst API_KEY = \"AIzaSyDUCkknQteTx5ntSZksWSzEzQKld19QrPc\";\nasync function runChat(prompt) {\n  const genAI = new GoogleGenerativeAI(API_KEY);\n  const model = genAI.getGenerativeModel({\n    model: MODEL_NAME\n  });\n  const generationConfig = {\n    temperature: 0.9,\n    topK: 1,\n    topP: 1,\n    maxOutputTokens: 2048\n  };\n  const safetySettings = [{\n    category: HarmCategory.HARM_CATEGORY_HARASSMENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n  }, {\n    category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n  }, {\n    category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n  }, {\n    category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\n    threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE\n  }];\n  const chat = model.startChat({\n    generationConfig,\n    safetySettings,\n    history: []\n  });\n  const result = await chat.sendMessage(prompt);\n  const response = result.response;\n  // console.log(response.text());\n  return response.text();\n}\nasync function generateResponse(inputData) {\n  try {\n    // Send request to Google Generative AI service\n    const response = await fetch('GENERATIVE_AI_ENDPOINT', {\n      method: 'POST',\n      body: JSON.stringify({\n        input: inputData\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n        // Add any necessary headers, such as authorization tokens\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch response from Generative AI service');\n    }\n    const responseData = await response.json();\n\n    // Check if response contains an error due to RECITATION block\n    if (responseData.error && responseData.error === 'RECITATION') {\n      // Handle RECITATION error here\n      console.error('RECITATION error occurred');\n      // Implement logic to address the error (e.g., adjust input data, retry request)\n      // For example, you might modify the input data and retry the request\n      const modifiedInputData = modifyInputData(inputData);\n      return generateResponse(modifiedInputData); // Retry request with modified input data\n    }\n\n    // Process and return response normally\n    return responseData.output;\n  } catch (error) {\n    console.error('Error:', error.message);\n    // Implement error handling logic (e.g., retrying request, logging errors)\n    throw error; // Propagate error to caller\n  }\n}\nfunction modifyInputData(inputData) {\n  // Implement logic to modify input data to address the RECITATION error\n  // For example, you might sanitize the input data or adjust its format\n  return inputData;\n}\n\n// Example usage\nconst userInput = 'User input data';\ngenerateResponse(userInput).then(response => {\n  console.log('Response:', response);\n}).catch(error => {\n  console.error('Error:', error.message);\n});\nexport default runChat;","map":{"version":3,"names":["GoogleGenerativeAI","HarmCategory","HarmBlockThreshold","MODEL_NAME","API_KEY","runChat","prompt","genAI","model","getGenerativeModel","generationConfig","temperature","topK","topP","maxOutputTokens","safetySettings","category","HARM_CATEGORY_HARASSMENT","threshold","BLOCK_MEDIUM_AND_ABOVE","HARM_CATEGORY_HATE_SPEECH","HARM_CATEGORY_SEXUALLY_EXPLICIT","HARM_CATEGORY_DANGEROUS_CONTENT","chat","startChat","history","result","sendMessage","response","text","generateResponse","inputData","fetch","method","body","JSON","stringify","input","headers","ok","Error","responseData","json","error","console","modifiedInputData","modifyInputData","output","message","userInput","then","log","catch"],"sources":["C:/Users/Zahid/Desktop/my-first-project/src/Config/Perplexity.jsx"],"sourcesContent":["\r\n// node --version # Should be >= 18\r\n// npm install @google/generative-ai\r\n\r\nimport {\r\n    GoogleGenerativeAI,\r\n    HarmCategory,\r\n    HarmBlockThreshold,\r\n  }  from \"@google/generative-ai\"\r\n  \r\n  const MODEL_NAME = \"gemini-1.0-pro\";\r\n  const API_KEY = \"AIzaSyDUCkknQteTx5ntSZksWSzEzQKld19QrPc\";\r\n  \r\n  async function runChat(prompt) {\r\n    const genAI = new GoogleGenerativeAI(API_KEY);\r\n    const model = genAI.getGenerativeModel({ model: MODEL_NAME });\r\n  \r\n    const generationConfig = {\r\n      temperature: 0.9,\r\n      topK: 1,\r\n      topP: 1,\r\n      maxOutputTokens: 2048,\r\n    };\r\n  \r\n    const safetySettings = [\r\n      {\r\n        category: HarmCategory.HARM_CATEGORY_HARASSMENT,\r\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n      },\r\n      {\r\n        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,\r\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n      },\r\n      {\r\n        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,\r\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n      },\r\n      {\r\n        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,\r\n        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,\r\n      },\r\n    ];\r\n  \r\n    const chat = model.startChat({\r\n      generationConfig,\r\n      safetySettings,\r\n      history: [\r\n      ],\r\n    });\r\n  \r\n    const result = await chat.sendMessage(prompt);\r\n    const response = result.response;\r\n    // console.log(response.text());\r\n    return response.text();\r\n  }\r\n  async function generateResponse(inputData) {\r\n    try {\r\n        // Send request to Google Generative AI service\r\n        const response = await fetch('GENERATIVE_AI_ENDPOINT', {\r\n            method: 'POST',\r\n            body: JSON.stringify({ input: inputData }),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                // Add any necessary headers, such as authorization tokens\r\n            },\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error('Failed to fetch response from Generative AI service');\r\n        }\r\n\r\n        const responseData = await response.json();\r\n\r\n        // Check if response contains an error due to RECITATION block\r\n        if (responseData.error && responseData.error === 'RECITATION') {\r\n            // Handle RECITATION error here\r\n            console.error('RECITATION error occurred');\r\n            // Implement logic to address the error (e.g., adjust input data, retry request)\r\n            // For example, you might modify the input data and retry the request\r\n            const modifiedInputData = modifyInputData(inputData);\r\n            return generateResponse(modifiedInputData); // Retry request with modified input data\r\n        }\r\n\r\n        // Process and return response normally\r\n        return responseData.output;\r\n    } catch (error) {\r\n        console.error('Error:', error.message);\r\n        // Implement error handling logic (e.g., retrying request, logging errors)\r\n        throw error; // Propagate error to caller\r\n    }\r\n}\r\n\r\nfunction modifyInputData(inputData) {\r\n    // Implement logic to modify input data to address the RECITATION error\r\n    // For example, you might sanitize the input data or adjust its format\r\n    return inputData;\r\n}\r\n\r\n// Example usage\r\nconst userInput = 'User input data';\r\ngenerateResponse(userInput)\r\n    .then(response => {\r\n        console.log('Response:', response);\r\n    })\r\n    .catch(error => {\r\n        console.error('Error:', error.message);\r\n    });\r\n\r\nexport default runChat;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}