{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Zahid\\\\Desktop\\\\ZahAi\\\\src\\\\Context\\\\Context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport runChat from \"../Config/Perplexity\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [recentPrompt, setRecentPrompt] = useState(\"\");\n  const [prevPrompts, setPrevPrompts] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const delaypara = (index, nextWord) => {\n    setTimeout(function () {\n      setResultData(prev => prev + nextWord);\n    }, 80 * index);\n  };\n  const newchat = () => {\n    setLoading(false);\n    setShowResult(false);\n  };\n  const onSent = async prompt => {\n    setResultData(\"\");\n    setLoading(true);\n    setShowResult(true);\n    let response;\n    if (prompt !== undefined) {\n      response = await runChat(prompt);\n      setRecentPrompt(prompt);\n    } else {\n      setPrevPrompts(prev => [...prev, input]);\n      setRecentPrompt(input);\n      response = await runChat(input);\n    }\n    let responseArray = response.split(\"**\");\n    let newResponse = \"\";\n    for (let i = 0; i < responseArray.length; i++) {\n      if (i === 0 || i % 2 !== 1) {\n        newResponse += responseArray[i];\n      } else {\n        newResponse += \"<b>\" + responseArray[i] + \"</b>\";\n      }\n    }\n    let newResponse2 = newResponse.split(\"*\").join(\"</br>\");\n    let newResponseArray = newResponse2.split(\" \");\n    for (let i = 0; i < newResponseArray.length; i++) {\n      const nextWord = newResponseArray[i];\n      delaypara(i, nextWord + \" \");\n    }\n    setLoading(false);\n    setInput(\"\");\n  };\n  const contextValue = {\n    prevPrompts,\n    setPrevPrompts,\n    onSent,\n    setRecentPrompt,\n    recentPrompt,\n    showResult,\n    loading,\n    resultData,\n    input,\n    setInput,\n    newchat\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"4fWgfvBYWXvjzmDc58o/cILfmm4=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","runChat","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","setInput","recentPrompt","setRecentPrompt","prevPrompts","setPrevPrompts","showResult","setShowResult","loading","setLoading","resultData","setResultData","delaypara","index","nextWord","setTimeout","prev","newchat","onSent","prompt","response","undefined","responseArray","split","newResponse","i","length","newResponse2","join","newResponseArray","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Zahid/Desktop/ZahAi/src/Context/Context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport runChat from \"../Config/Perplexity\";\r\n\r\nexport const Context = createContext();\r\n\r\nconst ContextProvider = (props) => {\r\n\r\n    const [input,setInput] = useState(\"\");\r\n    const [recentPrompt,setRecentPrompt] = useState(\"\");\r\n    const [prevPrompts,setPrevPrompts] = useState([]);\r\n    const [showResult,setShowResult] = useState(false);\r\n    const [loading,setLoading] = useState(false);\r\n    const [resultData,setResultData] = useState(\"\");\r\n\r\n    const delaypara = (index,nextWord) => {\r\n        setTimeout(function () {\r\n            setResultData(prev=>prev+nextWord);\r\n        },80*index)\r\n    }\r\n\r\n    const newchat = () => {\r\n        setLoading(false)\r\n        setShowResult(false)\r\n    }\r\n\r\n    const onSent = async (prompt) => {\r\n\r\n       setResultData(\"\")\r\n       setLoading(true)\r\n       setShowResult(true)\r\n       let response;\r\n        if(prompt !== undefined){\r\n            response = await runChat(prompt);\r\n            setRecentPrompt(prompt)\r\n        }else{\r\n            setPrevPrompts(prev=>[...prev,input])\r\n            setRecentPrompt(input)\r\n            response = await runChat(input)\r\n        }\r\n\r\n       let responseArray = response.split(\"**\")\r\n       let newResponse=\"\";\r\n       for(let i =0 ; i < responseArray.length; i++)\r\n       {\r\n        if(i===0 || i%2 !== 1){\r\n            newResponse += responseArray[i];\r\n        }\r\n        else{\r\n            newResponse += \"<b>\"+responseArray[i]+\"</b>\";\r\n        }\r\n       }\r\n       let newResponse2 = newResponse.split(\"*\").join(\"</br>\")\r\n      let newResponseArray = newResponse2.split(\" \");\r\n      for(let i=0; i<newResponseArray.length;i++){\r\n        const nextWord = newResponseArray[i];\r\n        delaypara(i,nextWord+\" \")\r\n      }\r\n       setLoading(false)\r\n       setInput(\"\")\r\n    }\r\n\r\n    const contextValue = {\r\n        prevPrompts,\r\n        setPrevPrompts,\r\n        onSent,\r\n        setRecentPrompt,\r\n        recentPrompt,\r\n        showResult,\r\n        loading,\r\n        resultData,\r\n        input,\r\n        setInput,\r\n        newchat\r\n    }\r\n\r\n    return(\r\n        <Context.Provider value={contextValue}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}